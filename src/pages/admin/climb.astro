---
// @ts-nocheck
// Admin Climb Management Page
import Header from "../../components/Header.astro";
import Layout from "../../layouts/Layout.astro";
import "../../styles/main.css";
import "../../styles/tailwind.css";
import "../../styles/admin/climb-admin.css";
import "../../styles/admin/responsive-optimization.css";
---

<Layout title="Qu·∫£n l√Ω Leo n√∫i - Admin">
    <Header currentPage="admin" pageTitle="Qu·∫£n l√Ω Leo n√∫i - Admin" />
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
      // @ts-nocheck
      document.addEventListener('DOMContentLoaded', async () => {
        const token = localStorage.getItem('authToken');
        if (!token) { window.location.href = '/login'; return; }
        try{
          const res = await fetch('/.netlify/functions/auth', { method:'POST', headers:{ 'Authorization':'Bearer ' + token, 'Content-Type':'application/json' }, body: JSON.stringify({ action:'verify' }) });
          const json = await res.json();
          if (!res.ok || !json.success || json.role !== 'admin') { window.location.href = '/account'; }
        }catch{ window.location.href = '/account'; }
      });
    </script>

    <!-- Header Card -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
        <div class="bg-white rounded-2xl p-6 shadow-sm border border-slate-200">
            <div class="flex items-center justify-between flex-col lg:flex-row gap-4 mobile-stack">
                <div class="flex items-center gap-4 w-full lg:w-auto mobile-text-center">
                    <a href="/admin" class="p-3 bg-slate-100 rounded-xl hover:bg-slate-200 transition-all duration-200 flex-shrink-0">
                        <i class="fas fa-arrow-left text-slate-600 text-xl"></i>
                    </a>
                    <div class="flex items-center gap-3 min-w-0 mobile-stack">
                        <div class="p-3 bg-blue-100 rounded-xl flex-shrink-0 mx-auto sm:mx-0">
                            <i class="fas fa-mountain text-blue-600 text-2xl"></i>
                        </div>
                        <div class="min-w-0 mobile-text-center">
                            <h1 class="text-xl lg:text-2xl font-bold text-slate-800 truncate">Qu·∫£n l√Ω Leo n√∫i</h1>
                            <p class="text-slate-600 text-sm lg:text-base truncate">Th·ªëng k√™, th√¥ng b√°o v√† c√†i ƒë·∫∑t GPS</p>
                        </div>
                    </div>
                </div>
                <div class="flex items-center gap-4 w-full lg:w-auto justify-between lg:justify-end mobile-stack">
                    <div class="text-center sm:text-right">
                        <p class="text-sm text-slate-600" id="currentDate">Loading...</p>
                        <p class="text-xs text-slate-500">H·ªá th·ªëng qu·∫£n l√Ω</p>
                    </div>
                    <button id="refreshBtn" class="px-3 py-2 bg-slate-100 text-slate-700 rounded-lg hover:bg-slate-200 transition mobile-full-width sm:w-auto">
                        <i class="fas fa-sync-alt"></i>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <!-- Error State -->
        <div id="error" class="hidden bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
            <div class="flex items-center">
                <i class="fas fa-exclamation-triangle text-red-500 mr-2"></i>
                <span id="errorMessage" class="text-red-700"></span>
            </div>
        </div>

        <!-- Success Message -->
        <div id="success" class="hidden bg-green-50 border border-green-200 rounded-lg p-4 mb-6">
            <div class="flex items-center">
                <i class="fas fa-check-circle text-green-500 mr-2"></i>
                <span id="successMessage" class="text-green-700"></span>
            </div>
        </div>

        <!-- Dashboard Content -->
        <div id="dashboard" class="space-y-8">
            <!-- Stats Cards -->
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mobile-stack">
                <div class="bg-white rounded-lg shadow-sm p-6 border border-gray-200">
                    <div class="flex items-center">
                        <div class="p-3 bg-blue-100 rounded-lg">
                            <i class="fas fa-users text-blue-600 text-xl"></i>
                        </div>
                        <div class="ml-4">
                            <p class="text-sm font-medium text-gray-600">T·ªïng ƒëƒÉng k√Ω</p>
                            <p class="text-2xl font-bold text-gray-900" id="totalRegistrations">--</p>
                            <div class="flex items-center mt-1">
                                <i class="fas fa-spinner fa-spin text-blue-500 mr-1 text-xs"></i>
                                <span class="text-xs text-gray-500">ƒêang c·∫≠p nh·∫≠t...</span>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="bg-white rounded-lg shadow-sm p-6 border border-gray-200">
                    <div class="flex items-center">
                        <div class="p-3 bg-green-100 rounded-lg">
                            <i class="fas fa-calendar-day text-green-600 text-xl"></i>
                        </div>
                        <div class="ml-4">
                            <p class="text-sm font-medium text-gray-600">H√¥m nay</p>
                            <p class="text-2xl font-bold text-gray-900" id="todayRegistrations">--</p>
                            <div class="flex items-center mt-1">
                                <i class="fas fa-spinner fa-spin text-green-500 mr-1 text-xs"></i>
                                <span class="text-xs text-gray-500">ƒêang c·∫≠p nh·∫≠t...</span>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="bg-white rounded-lg shadow-sm p-6 border border-gray-200">
                    <div class="flex items-center">
                        <div class="p-3 bg-yellow-100 rounded-lg">
                            <i class="fas fa-calendar-alt text-yellow-600 text-xl"></i>
                        </div>
                        <div class="ml-4">
                            <p class="text-sm font-medium text-gray-600">Th√°ng n√†y</p>
                            <p class="text-2xl font-bold text-gray-900" id="monthlyRegistrations">--</p>
                            <div class="flex items-center mt-1">
                                <i class="fas fa-spinner fa-spin text-yellow-500 mr-1 text-xs"></i>
                                <span class="text-xs text-gray-500">ƒêang c·∫≠p nh·∫≠t...</span>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="bg-white rounded-lg shadow-sm p-6 border border-gray-200">
                    <div class="flex items-center">
                        <div class="p-3 bg-purple-100 rounded-lg">
                            <i class="fas fa-bell text-purple-600 text-xl"></i>
                        </div>
                        <div class="ml-4">
                            <p class="text-sm font-medium text-gray-600">Th√¥ng b√°o</p>
                            <p class="text-2xl font-bold text-gray-900" id="activeNotifications">--</p>
                            <div class="flex items-center mt-1">
                                <i class="fas fa-spinner fa-spin text-purple-500 mr-1 text-xs"></i>
                                <span class="text-xs text-gray-500">ƒêang c·∫≠p nh·∫≠t...</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Main Content Grid -->
            <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mobile-stack">
                <!-- Notifications Management -->
                <div class="bg-white rounded-lg shadow-sm border border-gray-200">
                    <div class="p-6 border-b border-gray-200">
                        <h2 class="text-lg font-semibold text-gray-900 flex items-center">
                            <i class="fas fa-bell mr-2 text-blue-600"></i>
                            Qu·∫£n l√Ω th√¥ng b√°o
                        </h2>
                    </div>
                    <div class="p-6">
                        <!-- Create Notification Form -->
                        <form id="notificationForm" class="space-y-4 mb-6">
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Lo·∫°i th√¥ng b√°o</label>
                                <select name="type" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500">
                                    <option value="">Ch·ªçn lo·∫°i th√¥ng b√°o</option>
                                    <option value="weather">üåßÔ∏è C·∫£nh b√°o th·ªùi ti·∫øt</option>
                                    <option value="maintenance">üîß B·∫£o tr√¨</option>
                                    <option value="announcement">üì¢ Th√¥ng b√°o chung</option>
                                    <option value="emergency">üö® Kh·∫©n c·∫•p</option>
                                </select>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Ti√™u ƒë·ªÅ</label>
                                <input type="text" name="title" required class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500" placeholder="Nh·∫≠p ti√™u ƒë·ªÅ th√¥ng b√°o">
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">N·ªôi dung</label>
                                <textarea name="message" required rows="3" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-blue-500 focus:border-blue-500" placeholder="Nh·∫≠p n·ªôi dung th√¥ng b√°o"></textarea>
                            </div>
                            <button type="submit" class="w-full bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors">
                                <i class="fas fa-plus mr-2"></i>T·∫°o th√¥ng b√°o
                            </button>
                        </form>

                        <!-- Active Notifications List -->
                        <div>
                            <h3 class="text-sm font-semibold text-gray-800 mb-3">Th√¥ng b√°o ƒëang ho·∫°t ƒë·ªông</h3>
                            <div id="notificationsList" class="space-y-3">
                                <!-- Notifications will be inserted here -->
                            </div>
                        </div>
                    </div>
                </div>

                <!-- GPS Settings -->
                <div class="bg-white rounded-lg shadow-sm border border-gray-200">
                    <div class="p-6 border-b border-gray-200">
                        <h2 class="text-lg font-semibold text-gray-900 flex items-center">
                            <i class="fas fa-map-marker-alt mr-2 text-green-600"></i>
                            C√†i ƒë·∫∑t GPS
                        </h2>
                    </div>
                    <div class="p-6">
                        <form id="gpsForm" class="space-y-4">
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">B√°n k√≠nh ƒëƒÉng k√Ω (m)</label>
                                    <input type="number" name="registrationRadius" min="10" max="1000" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-green-500 focus:border-green-500">
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">B√°n k√≠nh ch·ª©ng nh·∫≠n (m)</label>
                                    <input type="number" name="certificateRadius" min="10" max="1000" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-green-500 focus:border-green-500">
                                </div>
                            </div>

                            <div class="space-y-3">
                                <label class="flex items-center">
                                    <input type="checkbox" name="requireGpsRegistration" class="h-4 w-4 text-green-600 focus:ring-green-500 border-gray-300 rounded">
                                    <span class="ml-2 text-sm text-gray-700">Y√™u c·∫ßu GPS khi ƒëƒÉng k√Ω</span>
                                </label>
                                <label class="flex items-center">
                                    <input type="checkbox" name="requireGpsCertificate" class="h-4 w-4 text-green-600 focus:ring-green-500 border-gray-300 rounded">
                                    <span class="ml-2 text-sm text-gray-700">Y√™u c·∫ßu GPS khi nh·∫≠n ch·ª©ng nh·∫≠n</span>
                                </label>
                                <label class="flex items-center">
                                    <input type="checkbox" name="registrationTimeEnabled" class="h-4 w-4 text-green-600 focus:ring-green-500 border-gray-300 rounded">
                                    <span class="ml-2 text-sm text-gray-700">Gi·ªõi h·∫°n th·ªùi gian ƒëƒÉng k√Ω</span>
                                </label>
                            </div>

                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Gi·ªù b·∫Øt ƒë·∫ßu</label>
                                    <input type="time" name="registrationStartTime" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-green-500 focus:border-green-500">
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Gi·ªù k·∫øt th√∫c</label>
                                    <input type="time" name="registrationEndTime" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-green-500 focus:border-green-500">
                                </div>
                            </div>

                            <button type="submit" class="w-full bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition-colors">
                                <i class="fas fa-save mr-2"></i>L∆∞u c√†i ƒë·∫∑t GPS
                            </button>
                        </form>
                    </div>
                </div>
            </div>

            <!-- Search Section -->
            <div class="bg-white rounded-lg shadow-sm border border-gray-200">
                <div class="p-6 border-b border-gray-200">
                    <h2 class="text-lg font-semibold text-gray-900 flex items-center">
                        <i class="fas fa-search mr-2 text-purple-600"></i>
                        Tra c·ª©u ng∆∞·ªùi leo n√∫i
                    </h2>
                </div>
                <div class="p-6">
                    <div class="flex flex-col md:flex-row gap-4 mb-6 mobile-stack">
                        <div class="flex-1">
                            <input type="tel" id="searchPhone" placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i ƒë·ªÉ t√¨m ki·∫øm" class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-purple-500 focus:border-purple-500">
                        </div>
                        <button id="searchBtn" class="px-6 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors mobile-full-width">
                            <i class="fas fa-search mr-2"></i>T√¨m ki·∫øm
                        </button>
                    </div>

                    <!-- Search Results -->
                    <div id="searchResults" class="hidden">
                        <h3 class="text-sm font-semibold text-gray-800 mb-3">K·∫øt qu·∫£ t√¨m ki·∫øm</h3>
                        <div id="searchResultsList" class="space-y-3">
                            <!-- Search results will be inserted here -->
                        </div>
                    </div>
                </div>
            </div>

            <!-- Recent Registrations -->
            <div class="bg-white rounded-lg shadow-sm border border-gray-200">
                <div class="p-6 border-b border-gray-200">
                    <h2 class="text-lg font-semibold text-gray-900 flex items-center">
                        <i class="fas fa-history mr-2 text-orange-600"></i>
                        ƒêƒÉng k√Ω g·∫ßn ƒë√¢y
                    </h2>
                </div>
                <div class="p-6">
                    <div id="recentRegistrations" class="space-y-4">
                        <!-- Recent registrations will be inserted here -->
                    </div>
                </div>
            </div>
        </div>
    </main>   
 <script>
        // @ts-nocheck
        // Climb Admin Management JavaScript
        const REALTIME_UPDATES_ENABLED = false;
        /** @typedef {'weather'|'maintenance'|'announcement'|'emergency'} NotificationType */
        /**
         * @typedef {Object} NotificationItem
         * @property {string} id
         * @property {NotificationType} type
         * @property {string} title
         * @property {string} message
         * @property {string} createdAt
         * @property {boolean} active
         */
        /**
         * @typedef {Object} GpsSettings
         * @property {number} registrationRadius
         * @property {number} certificateRadius
         * @property {boolean} requireGpsRegistration
         * @property {boolean} requireGpsCertificate
         * @property {boolean} registrationTimeEnabled
         * @property {string} registrationStartTime
         * @property {string} registrationEndTime
         */
        /**
         * @typedef {Object} RecentRegistration
         * @property {string} leaderName
         * @property {string} phoneNumber
         * @property {number} groupSize
         * @property {string} registrationDate
         * @property {string} registrationTime
         * @property {string=} birthday
         */
        /**
         * @typedef {Object} SearchResult
         * @property {string} representativeName
         * @property {string} phone
         * @property {number} memberCount
         * @property {string} registrationDate
         * @property {string} registrationTime
         * @property {'completed'|'pending'} status
         * @property {boolean} certificateIssued
         */
        /**
         * @typedef {Object} Stats
         * @property {number} totalRegistrations
         * @property {number} todayRegistrations
         * @property {number} monthlyRegistrations
         * @property {number} yearlyRegistrations
         */

        /** @type {Stats} */
        let stats = { totalRegistrations: 0, todayRegistrations: 0, monthlyRegistrations: 0, yearlyRegistrations: 0 };
        /** @type {NotificationItem[]} */
        let notifications = [];
        /** @type {GpsSettings} */
        let gpsSettings = {
            registrationRadius: 100,
            certificateRadius: 50,
            requireGpsRegistration: true,
            requireGpsCertificate: true,
            registrationTimeEnabled: false,
            registrationStartTime: '06:00',
            registrationEndTime: '18:00'
        };
        /** @type {RecentRegistration[]} */
        let recentRegistrations = [];
        /** @type {SearchResult[]} */
        let searchResults = [];

         // Google Apps Script endpoint for admin analytics (thongkeleonui.gs)
         const ADMIN_GS_URL = 'https://script.google.com/macros/s/AKfycbyWYJtTjYvSFT--TPpV6bk4-o6jKtqXBhe5di-h6ozC2sKscM_i8_PCJxzPpL_bEDNT/exec';

        // DOM Elements
        const loading = /** @type {HTMLElement|null} */(document.getElementById('loading'));
        const error = /** @type {HTMLElement|null} */(document.getElementById('error'));
        const success = /** @type {HTMLElement|null} */(document.getElementById('success'));
        const dashboard = /** @type {HTMLElement|null} */(document.getElementById('dashboard'));
        const notificationForm = /** @type {HTMLFormElement|null} */(document.getElementById('notificationForm'));
        const gpsForm = /** @type {HTMLFormElement|null} */(document.getElementById('gpsForm'));
        const searchBtn = /** @type {HTMLButtonElement|null} */(document.getElementById('searchBtn'));
        const refreshBtn = /** @type {HTMLButtonElement|null} */(document.getElementById('refreshBtn'));

        // Initialize
        document.addEventListener('DOMContentLoaded', function() {
            setupEventListeners();
            updateCurrentDate();
            if (REALTIME_UPDATES_ENABLED) {
                setupRealTimeUpdates();
            }
            
            // Load data in background (UI is already visible)
            loadInitialData();
            
            // Update date every minute
            setInterval(updateCurrentDate, 60000);
        });

        // Setup Event Listeners
        function setupEventListeners() {
            notificationForm?.addEventListener('submit', handleCreateNotification);
            gpsForm?.addEventListener('submit', handleSaveGpsSettings);
            searchBtn?.addEventListener('click', handleSearch);
            refreshBtn?.addEventListener('click', loadInitialData);
            
            // Enter key for search
            const searchInput = /** @type {HTMLInputElement|null} */(document.getElementById('searchPhone'));
            searchInput?.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') {
                    handleSearch();
                }
            });
        }

        // Update current date display
        function updateCurrentDate() {
            const now = new Date();
            const dateStr = now.toLocaleDateString('vi-VN', { 
                weekday: 'long', 
                year: 'numeric', 
                month: 'long', 
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
            const el = document.getElementById('currentDate');
            if (el) el.textContent = dateStr;
        }

        // Load initial data
        async function loadInitialData() {
            try {
                hideMessages();
                
                // Load data in background while UI is already visible
                await Promise.all([
                    loadCombinedData(),
                    loadStats(),
                    loadRecentRegistrations()
                ]);
                
                renderDashboard();
                broadcastUpdate('stats', stats);
            } catch (err) {
                const msg = err instanceof Error ? err.message : 'L·ªói kh√¥ng x√°c ƒë·ªãnh';
                showError('L·ªói khi t·∫£i d·ªØ li·ªáu: ' + msg);
            }
        }

        // Load combined data (notifications + GPS settings)
        async function loadCombinedData() {
            try {
                const response = await fetch('/.netlify/functions/combined-data');
                if (!response.ok) throw new Error('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu');
                
                const result = await response.json();
                notifications = /** @type {NotificationItem[]} */(result.notifications?.data || []);
                gpsSettings = /** @type {GpsSettings} */(result.gpsSettings?.data || gpsSettings);
            } catch (error) {
                console.error('Error loading combined data:', error);
                // Use fallback data
                notifications = [];
                gpsSettings = {
                    registrationRadius: 100,
                    certificateRadius: 50,
                    requireGpsRegistration: true,
                    requireGpsCertificate: true,
                    registrationTimeEnabled: false,
                    registrationStartTime: '06:00',
                    registrationEndTime: '18:00'
                };
            }
        }

         // Load stats (from Google Apps Script thongkeleonui.gs)
         async function loadStats() {
             try {
                 // 1) Initial stats (monthly/yearly)
                 const url1 = new URL(ADMIN_GS_URL);
                 url1.searchParams.set('action', 'getInitialStats');
                 const res1 = await fetch(url1.toString());
                 if (!res1.ok) throw new Error('Kh√¥ng th·ªÉ t·∫£i th·ªëng k√™ c∆° b·∫£n');
                 const json1 = await res1.json();
                 const base = json1?.data || {};

                 // 2) Today stats via getPeriodStats(start=today,end=today)
                 const today = new Date();
                 const yyyy = today.getFullYear();
                 const mm = String(today.getMonth() + 1).padStart(2, '0');
                 const dd = String(today.getDate()).padStart(2, '0');
                 const isoDate = `${yyyy}-${mm}-${dd}`;
                 const url2 = new URL(ADMIN_GS_URL);
                 url2.searchParams.set('action', 'getPeriodStats');
                 url2.searchParams.set('startDate', isoDate);
                 url2.searchParams.set('endDate', isoDate);
                 let todayCount = 0;
                 try {
                     const res2 = await fetch(url2.toString());
                     if (res2.ok) {
                         const json2 = await res2.json();
                         todayCount = Number(json2?.data?.periodCount || 0);
                     }
                 } catch (_) { /* ignore */ }

                 stats = {
                     totalRegistrations: Number(base?.yearlyCount || 0),
                     todayRegistrations: todayCount,
                     monthlyRegistrations: Number(base?.monthlyCount || 0),
                     yearlyRegistrations: Number(base?.yearlyCount || 0)
                 };
            } catch (e) {
                 stats = { totalRegistrations: 0, todayRegistrations: 0, monthlyRegistrations: 0, yearlyRegistrations: 0 };
             }
         }

        // Load recent registrations directly from Google Apps Script
        async function loadRecentRegistrations() {
            try {
                const url = new URL(ADMIN_GS_URL);
                url.searchParams.set('action', 'getRecentRegistrations');
                url.searchParams.set('limit', '10');
                const res = await fetch(url.toString());
                if (!res.ok) throw new Error('Google Apps Script error');
                const json = await res.json();
                const raw = Array.isArray(json?.data) ? json.data : (Array.isArray(json?.items) ? json.items : []);
                // Normalize to { leaderName, phoneNumber, groupSize, registrationDate, registrationTime }
                recentRegistrations = raw.map((it) => ({
                    leaderName: it.leaderName || it.representativeName || it.name || '',
                    phoneNumber: it.phoneNumber || it.phone || '',
                    groupSize: Number(it.groupSize ?? it.memberCount ?? 0),
                    registrationDate: it.registrationDate || (it.timestamp ? String(it.timestamp) : ''),
                    registrationTime: it.registrationTime || (it.time ? String(it.time) : ''),
                    birthday: it.birthday || ''
                }));
                console.log('Recent registrations normalized:', recentRegistrations);
            } catch (e) {
                recentRegistrations = [];
                console.error('Failed to load recent registrations', e);
            }
        }

        // Render dashboard
        function renderDashboard() {
            // Update stats with animation
            updateStatCard('totalRegistrations', stats.totalRegistrations || 0);
            updateStatCard('todayRegistrations', stats.todayRegistrations || 0);
            updateStatCard('monthlyRegistrations', stats.monthlyRegistrations || 0);
            updateStatCard('activeNotifications', (notifications as NotificationItem[]).filter(n => n.active).length);

            // Render notifications
            renderNotifications();
            
            // Populate GPS form
            populateGpsForm();
            
            // Render recent registrations
            renderRecentRegistrations();
        }

        // Update stat card with animation
        function updateStatCard(elementId, value) {
            const element = document.getElementById(elementId);
            if (!element) return;
            
            // Update the number with animation
            element.textContent = String(value);
            element.style.transform = 'scale(1.05)';
            setTimeout(() => {
                element.style.transform = 'scale(1)';
            }, 200);
            
            // Update the status row entirely to avoid leftover text
            const cardContainer = element.closest('.bg-white.rounded-lg.shadow-sm');
            if (!cardContainer) return;
            const statusRow = cardContainer.querySelector('.flex.items-center.mt-1');
            if (statusRow) {
                statusRow.innerHTML = '<i class="fas fa-check-circle text-green-500 mr-1 text-xs"></i><span class="text-xs text-green-600">ƒê√£ c·∫≠p nh·∫≠t</span>';
            }
        }

        // Render notifications list from current in-memory notifications
        function renderNotifications() {
            const container = document.getElementById('notificationsList') as HTMLElement | null;
            if (!container) return;
            const activeNotifications = (notifications as NotificationItem[]).filter(n => n.active);
            if (activeNotifications.length === 0) {
                container.innerHTML = '<p class="text-sm text-gray-500 text-center py-4">Ch∆∞a c√≥ th√¥ng b√°o n√†o</p>';
                return;
            }
            container.innerHTML = activeNotifications.map(notification => `
                <div class="flex items-start justify-between p-3 bg-gray-50 rounded-lg border-l-4 ${getNotificationBorderColor(notification.type)}">
                    <div class="flex-1 min-w-0">
                        <div class="flex items-center space-x-2 mb-1">
                            <span class="text-sm font-medium text-gray-900">${notification.title}</span>
                            <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium ${getNotificationBadgeColor(notification.type)}">
                                ${getNotificationTypeLabel(notification.type)}
                            </span>
                        </div>
                        <p class="text-sm text-gray-600 mb-2">${notification.message}</p>
                        <p class="text-xs text-gray-500">${formatDate(notification.createdAt)}</p>
                    </div>
                    <button onclick="deleteNotification('${notification.id}')" class="ml-3 p-1 text-red-600 hover:bg-red-50 rounded">
                        <i class="fas fa-trash text-sm"></i>
                    </button>
                </div>
            `).join('');
        }

        // Get notification border color
        function getNotificationBorderColor(type) {
            const colors = {
                weather: 'border-blue-500',
                maintenance: 'border-yellow-500',
                announcement: 'border-green-500',
                emergency: 'border-red-500'
            };
            return (colors as Record<NotificationType, string>)[type] || 'border-gray-500';
        }

        // Get notification badge color
        function getNotificationBadgeColor(type) {
            const colors = {
                weather: 'bg-blue-100 text-blue-800',
                maintenance: 'bg-yellow-100 text-yellow-800',
                announcement: 'bg-green-100 text-green-800',
                emergency: 'bg-red-100 text-red-800'
            };
            return (colors as Record<NotificationType, string>)[type] || 'bg-gray-100 text-gray-800';
        }

        // Get notification type label
        function getNotificationTypeLabel(type) {
            const labels = {
                weather: 'Th·ªùi ti·∫øt',
                maintenance: 'B·∫£o tr√¨',
                announcement: 'Th√¥ng b√°o',
                emergency: 'Kh·∫©n c·∫•p'
            };
            return (labels as Record<NotificationType, string>)[type] || type;
        }

        // Populate GPS form with current settings
        function populateGpsForm() {
            const form = document.getElementById('gpsForm') as HTMLFormElement | null;
            if (!form) return;
            const registrationRadius = form.elements.namedItem('registrationRadius') as HTMLInputElement | null;
            const certificateRadius = form.elements.namedItem('certificateRadius') as HTMLInputElement | null;
            const requireGpsRegistration = form.elements.namedItem('requireGpsRegistration') as HTMLInputElement | null;
            const requireGpsCertificate = form.elements.namedItem('requireGpsCertificate') as HTMLInputElement | null;
            const registrationTimeEnabled = form.elements.namedItem('registrationTimeEnabled') as HTMLInputElement | null;
            const registrationStartTime = form.elements.namedItem('registrationStartTime') as HTMLInputElement | null;
            const registrationEndTime = form.elements.namedItem('registrationEndTime') as HTMLInputElement | null;

            if (registrationRadius) registrationRadius.value = String(gpsSettings.registrationRadius ?? 100);
            if (certificateRadius) certificateRadius.value = String(gpsSettings.certificateRadius ?? 50);
            if (requireGpsRegistration) requireGpsRegistration.checked = gpsSettings.requireGpsRegistration !== false;
            if (requireGpsCertificate) requireGpsCertificate.checked = gpsSettings.requireGpsCertificate !== false;
            if (registrationTimeEnabled) registrationTimeEnabled.checked = Boolean(gpsSettings.registrationTimeEnabled);
            if (registrationStartTime) registrationStartTime.value = gpsSettings.registrationStartTime || '06:00';
            if (registrationEndTime) registrationEndTime.value = gpsSettings.registrationEndTime || '18:00';
        }

        // Render recent registrations
        function renderRecentRegistrations() {
            const container = document.getElementById('recentRegistrations') as HTMLElement | null;
            if (!container) return;
            
            if (recentRegistrations.length === 0) {
                container.innerHTML = '<p class="text-sm text-gray-500 text-center py-4">Ch∆∞a c√≥ ƒëƒÉng k√Ω n√†o</p>';
                return;
            }

            container.innerHTML = recentRegistrations.slice(0, 10).map(reg => `
                <div class="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                    <div class="flex items-center space-x-4">
                        <div class="p-2 bg-blue-100 rounded-lg">
                            <i class="fas fa-user text-blue-600"></i>
                        </div>
                        <div>
                            <p class="text-sm font-medium text-gray-900">${reg.leaderName || ''}</p>
                            <p class="text-sm text-gray-600">${reg.phoneNumber || ''}</p>
                        </div>
                    </div>
                    <div class="text-right">
                        <p class="text-sm font-medium text-gray-900">${reg.groupSize || 0} ng∆∞·ªùi</p>
                        <p class="text-xs text-gray-500">${reg.registrationDate || ''} ${reg.registrationTime || ''}</p>
                    </div>
                </div>
            `).join('');
        }

        // Handle create notification
        async function handleCreateNotification(e) {
            e.preventDefault();
            
            const formEl = /** @type {HTMLFormElement} */(e.currentTarget);
            const formData = new FormData(formEl);
            /** @type {NotificationItem} */
            const notification = {
                id: Date.now().toString(),
                type: /** @type {NotificationType} */(formData.get('type') || 'announcement'),
                title: String(formData.get('title') || ''),
                message: String(formData.get('message') || ''),
                createdAt: new Date().toISOString(),
                active: true
            };

            try {
                const res = await fetch('/.netlify/functions/combined-data', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ action: 'createNotification', data: notification })
                });
                if (!res.ok) throw new Error('Kh√¥ng th·ªÉ t·∫°o th√¥ng b√°o');
                
                // Add notification to local array immediately for instant UI update
                notifications.push(notification);
                
                // Broadcast real-time update IMMEDIATELY (before loading from server)
                console.log('üöÄ Broadcasting new notification immediately:', notification);
                broadcastUpdate('notifications', { 
                    activeCount: notifications.filter(n => n.active).length,
                    newNotification: notification
                });
                
                // Also broadcast via BroadcastChannel for cross-tab communication
                if (window.adminBroadcastChannel) {
                    window.adminBroadcastChannel.postMessage({
                        type: 'notificationCreated',
                        notification: notification,
                        timestamp: Date.now()
                    });
                }
                
                // Update UI immediately (no page reload)
                renderDashboard();
                notificationForm?.reset();
                showSuccess('Th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c t·∫°o th√†nh c√¥ng!');
                
            } catch (err) {
                const msg = err instanceof Error ? err.message : 'L·ªói kh√¥ng x√°c ƒë·ªãnh';
                showError('L·ªói khi t·∫°o th√¥ng b√°o: ' + msg);
            }
        }

        // Handle save GPS settings
        async function handleSaveGpsSettings(e) {
            e.preventDefault();
            
            const formEl = /** @type {HTMLFormElement} */(e.currentTarget);
            const formData = new FormData(formEl);
            /** @type {GpsSettings} */
            const newSettings = {
                registrationRadius: parseInt(String(formData.get('registrationRadius') ?? '0')),
                certificateRadius: parseInt(String(formData.get('certificateRadius') ?? '0')),
                requireGpsRegistration: formData.get('requireGpsRegistration') === 'on',
                requireGpsCertificate: formData.get('requireGpsCertificate') === 'on',
                registrationTimeEnabled: formData.get('registrationTimeEnabled') === 'on',
                registrationStartTime: String(formData.get('registrationStartTime') ?? ''),
                registrationEndTime: String(formData.get('registrationEndTime') ?? '')
            };

            try {
                const res = await fetch('/.netlify/functions/combined-data', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ action: 'updateGpsSettings', data: newSettings })
                });
                if (!res.ok) throw new Error('Kh√¥ng th·ªÉ l∆∞u c√†i ƒë·∫∑t GPS');
                await loadCombinedData();
                renderDashboard();
                showSuccess('C√†i ƒë·∫∑t GPS ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!');
                
                // Broadcast real-time update for GPS settings
                broadcastUpdate('gpsSettings', newSettings);
            } catch (err) {
                const msg = err instanceof Error ? err.message : 'L·ªói kh√¥ng x√°c ƒë·ªãnh';
                showError('L·ªói khi l∆∞u c√†i ƒë·∫∑t GPS: ' + msg);
            }
        }

        // Handle search
         async function handleSearch() {
             const phoneInput = /** @type {HTMLInputElement|null} */(document.getElementById('searchPhone'));
             const phone = (phoneInput?.value || '').trim();
             
             if (!phone) {
                 showError('Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i ƒë·ªÉ t√¨m ki·∫øm');
                 return;
             }

             try {
                 if (searchBtn) {
                    searchBtn.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>ƒêang t√¨m...';
                    searchBtn.disabled = true;
                 }

                 const url = new URL(ADMIN_GS_URL);
                 url.searchParams.set('action', 'searchPhone');
                 url.searchParams.set('phone', phone);
                 const res = await fetch(url.toString());
                 if (!res.ok) throw new Error('Kh√¥ng th·ªÉ k·∫øt n·ªëi Google Apps Script');
                 const json = await res.json();
                const items = Array.isArray(json?.data) ? json.data : [];
                // Map to UI structure (fields from thongkeleonui.gs searchPhone)
                searchResults = items.map((it) => ({
                    representativeName: it.leaderName || '',
                    phone: it.phone || it.phoneNumber || phone,
                    memberCount: Number(it.memberCount || 0),
                    registrationDate: it.timestamp || '', // already formatted dd/MM/yyyy
                    registrationTime: it.registrationTime || '',
                    status: Number(it.certificateCount || 0) > 0 ? 'completed' : 'pending',
                    certificateIssued: Number(it.certificateCount || 0) > 0
                }));

                 renderSearchResults();
                 
             } catch (err) {
                 const msg = err instanceof Error ? err.message : 'L·ªói kh√¥ng x√°c ƒë·ªãnh';
                 showError('L·ªói khi t√¨m ki·∫øm: ' + msg);
             } finally {
                 if (searchBtn) {
                    searchBtn.innerHTML = '<i class="fas fa-search mr-2"></i>T√¨m ki·∫øm';
                    searchBtn.disabled = false;
                 }
             }
         }

        // Render search results
        function renderSearchResults() {
            const container = document.getElementById('searchResults') as HTMLElement | null;
            const listContainer = document.getElementById('searchResultsList') as HTMLElement | null;
            
            if (!container || !listContainer) return;
            if (searchResults.length === 0) {
                container.classList.add('hidden');
                showError('Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi leo n√∫i v·ªõi s·ªë ƒëi·ªán tho·∫°i n√†y');
                return;
            }

            container.classList.remove('hidden');
            listContainer.innerHTML = searchResults.map(result => `
                <div class="p-4 bg-gray-50 rounded-lg border">
                    <div class="flex items-center justify-between">
                        <div>
                            <p class="text-sm font-medium text-gray-900">${result.representativeName}</p>
                            <p class="text-sm text-gray-600">${result.phone}</p>
                            <p class="text-xs text-gray-500 mt-1">ƒêƒÉng k√Ω: ${result.registrationDate} ${result.registrationTime || ''}</p>
                        </div>
                        <div class="text-right">
                            <p class="text-sm font-medium text-gray-900">${result.memberCount} ng∆∞·ªùi</p>
                            <span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium ${result.status === 'completed' ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'}">
                                ${result.status === 'completed' ? 'Ho√†n th√†nh' : 'ƒêang x·ª≠ l√Ω'}
                            </span>
                            ${result.certificateIssued ? '<p class="text-xs text-green-600 mt-1"><i class="fas fa-certificate mr-1"></i>ƒê√£ c·∫•p ch·ª©ng nh·∫≠n</p>' : ''}
                        </div>
                    </div>
                </div>
            `).join('');
        }

        // Delete notification
        async function deleteNotification(id) {
            if (!confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a th√¥ng b√°o n√†y?')) return;

            try {
                const res = await fetch('/.netlify/functions/combined-data', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ action: 'deleteNotification', data: { id } })
                });
                if (!res.ok) throw new Error('Kh√¥ng th·ªÉ x√≥a th√¥ng b√°o');
                // Optimistically update local state and re-render without full reload
                notifications = (notifications as NotificationItem[]).filter(n => n.id !== id);
                renderDashboard();
                showSuccess('Th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng!');
                
                // Broadcast real-time update
                broadcastUpdate('notifications', { 
                    activeCount: (notifications as NotificationItem[]).filter(n => n.active).length 
                });
            } catch (err) {
                const msg = err instanceof Error ? err.message : 'L·ªói kh√¥ng x√°c ƒë·ªãnh';
                showError('L·ªói khi x√≥a th√¥ng b√°o: ' + msg);
            }
        }

        // Utility functions
        function formatDate(dateString) {
            const date = new Date(dateString);
            return date.toLocaleDateString('vi-VN', {
                year: 'numeric',
                month: 'short',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
        }

        function showLoading(show) {
            loading?.classList.toggle('hidden', !show);
        }

        function showError(message) {
            const msgEl = document.getElementById('errorMessage');
            if (msgEl) msgEl.textContent = message;
            error?.classList.remove('hidden');
            if (error) setTimeout(() => error.classList.add('hidden'), 5000);
        }

        function showSuccess(message) {
            const msgEl = document.getElementById('successMessage');
            if (msgEl) msgEl.textContent = message;
            success?.classList.remove('hidden');
            if (success) setTimeout(() => success.classList.add('hidden'), 3000);
        }

        function hideMessages() {
            error?.classList.add('hidden');
            success?.classList.add('hidden');
        }

        // Real-time updates system removed
        function setupRealTimeUpdates() {}

        function handleRealTimeUpdate(updateData) {
            if (updateData.type === 'notifications') {
                // Update notifications count
                stats.activeNotifications = updateData.data.activeCount || 0;
                updateStatCard('activeNotifications', stats.activeNotifications);
                showRealTimeNotification('Th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t');
            } else if (updateData.type === 'gpsSettings') {
                // Update GPS settings
                gpsSettings = updateData.data;
                populateGpsForm();
                showRealTimeNotification('C√†i ƒë·∫∑t GPS ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t');
            } else if (updateData.type === 'stats') {
                // Update all stats
                stats = { ...stats, ...updateData.data };
                renderDashboard();
                showRealTimeNotification('Th·ªëng k√™ ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t');
            }
        }

        function showRealTimeNotification(_) {}

        // Broadcast updates to other tabs and users
        function broadcastUpdate() {}

        // Expose delete function globally for inline onclick
        // @ts-ignore
        window.deleteNotification = deleteNotification;
    </script>
</Layout>